def raw01_movej():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  step_count_4b468a9d_5323_469e_b197_16883b7bec88 = 0.0
  thread Step_Counter_Thread_8ef1c476_606d_468f_a58c_5efdc981a26a():
    while (True):
      step_count_4b468a9d_5323_469e_b197_16883b7bec88 = step_count_4b468a9d_5323_469e_b197_16883b7bec88 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_8ef1c476_606d_468f_a58c_5efdc981a26a()
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.158,0.0,0.0,0.0])
  set_payload(1.1, [0.0, 0.0, 0.05])
  global test_i_1=1
  global d02_amp_sw_p=p[0.24105888676069087,-0.5883807075174515,0.04253071488024829,-2.1390614672735473,-2.2744356634124774,0.025529647469294644]
  global d02_home_p=p[0.1732682021082889,-0.2191980622028465,0.14462836758288314,-2.2457417015242487,-2.168126990777858,0.02403181694774056]
  global d02_plug_p=p[0.03941834447547716,-0.5768816082210633,0.04943546801341098,-2.245775473613361,-2.1681595833388108,0.024084681080175536]
  global g01_bolt_apprch=p[0.2197530505028727,-0.34935378922314203,0.22112879372511315,-0.10675922764210362,-2.959767196742132,-0.7482006727987155]
  global g01_home=p[0.0940623920741982,-0.4351036418929621,0.2266362942491284,-0.5557952714212159,-3.08938195696355,-0.01723016519626886]
  global g01_nut_pickup=p[0.26030397972067465,-0.6865422937981095,0.014802496249386315,0.08461618002280345,3.140374576802358,1.4297837170641528E-4]
  global Waypoint_1_p=p[.191775081171, -.418747451790, .177182863761, 2.685057274366, -.620041341060, .526197795440]
  global Waypoint_1_q=[1.529866099357605, -1.8349453411498011, 2.3999460379229944, -2.5497456989684046, 5.010201930999756, -2.6651251951800745]
  global Waypoint_2_p=p[.200486219651, -.431302829478, .149487730691, 2.685027412888, -.620151680000, .526187370062]
  global Waypoint_2_q=[1.5580695867538452, -1.7298971615233363, 2.4135940710650843, -2.6762339077391566, 4.998625755310059, -2.637871805821554]
  global Waypoint_3_p=p[.209977903995, -.393649996255, .162056881228, 2.685141294611, -.620068304430, .526104166498]
  global Waypoint_3_q=[1.5891422033309937, -1.8521324596800746, 2.461686913167135, -2.610023637811178, 4.985943794250488, -2.60868484178652]
  global Waypoint_4_p=p[.192947723963, -.420800814081, .061456843287, 3.079775299291, -.620094474218, -.000020152866]
  global Waypoint_4_q=[1.7077327966690063, -1.4425328534892579, 2.184094254170553, -2.312221666375631, 4.713484764099121, -2.6065831820117396]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  $ 1 "Robot Program"
  $ 2 "MoveJ"
  $ 3 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 4 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 5 "MoveL"
  $ 6 "Waypoint_3" "breakAfter"
  movel(Waypoint_3_p, a=1.2, v=0.25)
  $ 7 "Waypoint_4" "breakAfter"
  movel(Waypoint_4_p, a=1.2, v=0.25)
  $ 8 "Direction: Tool Z+"
  global move_thread_flag_8=0
  thread move_thread_8():
    enter_critical
    move_thread_flag_8 = 1
    local towardsPos=calculate_point_to_move_towards(get_forward_kin(), [0.0,0.0,1.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.02)
    move_thread_flag_8 = 2
    exit_critical
  end
  move_thread_flag_8 = 0
  move_thread_han_8 = run move_thread_8()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_8
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.005, normalizedPosDir[1] * 0.005, normalizedPosDir[2] * 0.005, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 9 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 10 "Waypoint_1" "breakAfter"
  movel(Waypoint_1_p, a=1.2, v=0.25)
end
