def KeyenceRobotVisionSetup():
  set_analog_inputrange(0, 0)
  set_analog_inputrange(1, 0)
  set_analog_inputrange(2, 0)
  set_analog_inputrange(3, 0)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_runstate_outputs([])
  set_payload(0.0)
  set_gravity([0.0, 0.0, 9.82])
  #  This program is for setting up the robot vision system using
  #  Keyence's vision sensor.
  #  Please do not use it for purposes other than its original
  #  intended purpose.
  #  With regard to robot operation, please use the robot while 
  #  following the precautions stated in the "User's Manual".
  # 
  # Copyright (c) 2015 KEYENCE CORPORATION. All rights reserved.
  
  
  def CUR_SetUpCamera(CAM, IP_Address, Port):
  # Pass parameters to global variables.
    global Camera = CAM
    varmsg("Camera", Camera)
  
    global IP = IP_Address
    varmsg("IP", IP)
  
    global TelPort = Port
    varmsg("TelPort", TelPort)
    
    global Version = 1030000
    varmsg("Version", Version)
    
    global DiscID = 120
    varmsg("DiscID", DiscID)
    
    global Speed = 10
    varmsg("Speed", Speed)
    
    global Accel = 100
    varmsg("Accel", Accel)
    
    global MaxRealSpeed = 0.3
    global MaxRealAccel = 0.3
  
  end
  
  
  def CUR_InitComm(CAM):
  # Open the connection.
    global connected = False
    while (not  connected):
      global connected = socket_open(IP, TelPort, Camera)	# Establish connection to camera
      varmsg("connected", connected)						# server via Telnet
    end
    return connected
  end
  
  
  def CUR_ProcCommand(CAM):
  # Process a command.
    global Camera = CAM
    varmsg("Camera", Camera)
    global nComID = 0
    varmsg("nComID", nComID)
    global nOprtID = 0
    varmsg("nOprtID", nOprtID)
    global nReqID = 0
    varmsg("nReqID", nReqID)
    local nResRslt = 0
    varmsg("nResRslt", nResRslt)
    global Com = socket_read_ascii_float(13, Camera)
    varmsg("Com", Com)
    local P0 = 0
    local P1 = 0
    local P2 = 0
    local P3 = 0
    local P4 = 0
    local P5 = 0
    local P6 = 0
    local P7 = 0
    local P8 = 0
    
    local argNum = floor(Com[0])
    
    if argNum >= 1:
      nComID = floor(Com[1])
    end
    if argNum >= 2:
      nOprtID = floor(Com[2])
    end
    if argNum >= 3:
      nReqID = floor(Com[3])
    end
    if argNum >= 4:
      P0 = floor(Com[4])
    end
    if argNum >= 5:
      P1 = floor(Com[5])
    end
    if argNum >= 6:
      P2 = floor(Com[6])
    end
    if argNum >= 7:
      P3 = floor(Com[7])
    end
    if argNum >= 8:
      P4 = floor(Com[8])
    end
    if argNum >= 9:
      P5 = floor(Com[9])
    end
    if argNum >= 10:
      P6 = floor(Com[10])
    end
    if argNum >= 11:
      P7 = floor(Com[11])
    end
    if argNum >= 12:
      P8 = floor(Com[12])
    end
    
    if argNum == 0:
  # Read failed or timeout
      return 0
    elif nComID != 3:
  # Invalid command number
      OutputError(nOprtID, nReqID, nResRslt)
      return 1
    end
    
    if nOprtID == 1:
  # Echo reply
      Sum = P2
      nResRslt = ProcEcho(nOprtID, nReqID, Sum, P0, P1)
      
    elif nOprtID == 2:
  # Get Parameters
      Sum = P0
      nResRslt = ProcGetParam(nOprtID, nReqID, Sum)
      
    elif nOprtID == 3:
  # Set Parameters
      Sum = P5
      nResRslt = ProcSetParam(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4)
      
    elif nOprtID == 4:
  # Get current position
      Sum = P0
      nResRslt = ProcGetPos(nOprtID, nReqID, Sum)
      
    elif nOprtID == 5:
  # Move relatively
      Sum = P8
      nResRslt = ProcMoveRel(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5, P6, P7)
      
    elif nOprtID == 6:
  # Move absolutely
      Sum = P6
      nResRslt = ProcMoveAbs(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5)
      
    elif nOprtID == 7:
  # Get version
      Sum = P0
      nResRslt = ProcGetVer(nOprtID, nReqID, Sum)
      
    else:
      nResRslt = 1
      
    end
    
    if nResRslt == 1:
      OutputError(nOprtID, nReqID, nResRslt)
    end
    
    return nResRslt
  end
  
  
  def CUR_CloseComm(CAM):
  # Close the connection.
    global Camera = CAM
    varmsg("Camera", Camera)
    socket_close(Camera)
  end
  
  
  # Echo reply
  def ProcEcho(nOprtID, nReqID, Sum, P0, P1):
  # Result
    local nParamSum = nOprtID + nReqID + P0 + P1
    local nResRslt = 0
    if Sum != nParamSum:
      nResRslt = 1
      return nResRslt
    end
  # Process
    local O0 = P0
    local O1 = P1
  # Conversion
    local nResSum = O0 + O1
    nResSum = nResSum + nOprtID + nReqID + nResRslt
  
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O0, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O1, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  # Get parameters
  def ProcGetParam(nOprtID, nReqID, Sum):
  # Result
    local nParamSum = nOprtID + nReqID
    local nResRslt = 0
    if Sum != nParamSum:
      nResRslt = 1
      return nResRslt
    end
  # Process
    local O0 = 0
    local O1 = 0
    local O2 = 0
    local O3 = Speed
    local O4 = Accel
  # Conversion
    nResSum = O0 + O1 + O2 + O3 + O4
    nResSum = nResSum + nOprtID + nReqID + nResRslt
    
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O0, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O1, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O2, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O3, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O4, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  
  # Set parameters
  def ProcSetParam(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4):
  # Result
    local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4
    local nResRslt = 0
    if Sum != nParamSum:
      nResRslt = 1
      return nResRslt
    end
  # Process
    if P1 != 0:
      nResRslt = 2
    end
    if P2 != 0:
      nResRslt = 2
    end
    Speed = P3
    Accel = P4
    
    local O0 = 0
    local O1 = 0
    local O2 = 0
    local O3 = Speed
    local O4 = Accel
  # Conversion
    local nResSum = O0 + O1 + O2 + O3 + O4
    nResSum = nResSum + nOprtID + nReqID + nResRslt
  
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O0, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O1, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O2, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O3, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O4, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  
  # Get current position
  def ProcGetPos(nOprtID, nReqID, Sum):
  # Result
    local nParamSum = nOprtID + nReqID
    local nResRslt = 0
    if Sum != nParamSum:
      nResRslt = 1
      return nResRslt
    end
  # Process
    local CurrentPos = get_actual_tcp_pose_RPY()
    local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
    local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
    local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
    local O3 = floor(Key_r2d(CurrentPos[3]) * 10.0 + 0.5)
    local O4 = floor(Key_r2d(CurrentPos[4]) * 10.0 + 0.5)
    local O5 = floor(Key_r2d(CurrentPos[5]) * 10.0 + 0.5)
  # Conversion
    local nResSum = O0 + O1 + O2 + O3 + O4 + O5
    nResSum = nResSum + nOprtID + nReqID + nResRslt
  
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O0, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O1, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O2, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O3, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O4, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O5, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  
  # Move relatively
  def ProcMoveRel(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5, P6, P7):
  # Result
    local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5 + P6 + P7
    local nResRslt = 0
    if Sum != nParamSum:
      nResRslt = 1
      return nResRslt
    end
  # Process
    local CurrentPos = get_actual_tcp_pose_RPY()
    A0 = P0 / 1000000.0
    A1 = P1 / 1000000.0
    A2 = P2 / 1000000.0
    A3 = d2r(P3) / 10.0
    A4 = d2r(P4) / 10.0
    A5 = d2r(P5) / 10.0
    local Vec = p[A0, A1, A2, A3, A4, A5]
    local Pos = pose_add_RPY(CurrentPos, Vec)
    MoveRPY(Pos)
  
    CurrentPos = get_actual_tcp_pose_RPY()
    local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
    local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
    local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
    local O3 = floor(Key_r2d(CurrentPos[3]) * 10.0 + 0.5)
    local O4 = floor(Key_r2d(CurrentPos[4]) * 10.0 + 0.5)
    local O5 = floor(Key_r2d(CurrentPos[5]) * 10.0 + 0.5)
  # Conversion
    local nResSum = O0 + O1 + O2 + O3 + O4 + O5
    nResSum = nResSum + nOprtID + nReqID + nResRslt
  
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O0, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O1, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O2, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O3, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O4, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O5, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  
  # Move absolutely
  def ProcMoveAbs(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5):
  # Result
    local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5
    local nResRslt = 0
    if Sum != nParamSum:
      nResRslt = 1
      return nResRslt
    end
  # Process
    A0 = P0 / 1000000.0
    A1 = P1 / 1000000.0
    A2 = P2 / 1000000.0
    A3 = d2r(P3) / 10.0
    A4 = d2r(P4) / 10.0
    A5 = d2r(P5) / 10.0
    local Pos = p[A0, A1, A2, A3, A4, A5]
    MoveRPY(Pos)
  
    local CurrentPos = get_actual_tcp_pose_RPY()
    local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
    local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
    local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
    local O3 = floor(Key_r2d(CurrentPos[3]) * 10.0 + 0.5)
    local O4 = floor(Key_r2d(CurrentPos[4]) * 10.0 + 0.5)
    local O5 = floor(Key_r2d(CurrentPos[5]) * 10.0 + 0.5)
  # Conversion
    local nResSum = O0 + O1 + O2 + O3 + O4 + O5
    nResSum = nResSum + nOprtID + nReqID + nResRslt
  
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O0, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O1, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O2, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O3, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O4, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O5, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  # Get version
  def ProcGetVer(nOprtID, nReqID, Sum):
  # Result
    local nParamSum = nOprtID + nReqID
    local nResRslt = 0
    if Sum != nParamSum:
      nResRslt = 1
      return nResRslt
    end
  # Process
    local O0 = Version
    local O1 = DiscID
  # Conversion
    nResSum = O0 + O1
    nResSum = nResSum + nOprtID + nReqID + nResRslt
  
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O0, Camera)
    socket_send_string(",", Camera)
    socket_send_string(O1, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  # Output an error message
  def OutputError(nOprtID, nReqID, nResRslt):
  # Conversion
    nResSum = nOprtID + nReqID + nResRslt
  
    socket_send_string("CRBT,", Camera)
    socket_send_string(nOprtID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nReqID, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResRslt, Camera)
    socket_send_string(",", Camera)
    socket_send_string(nResSum, Camera)
    socket_send_crlf(Camera)
    
    return nResRslt
  end
  
  
  # Send CRLF
  def socket_send_crlf(CAM):
    global Camera = CAM
    
    socket_send_byte(13, Camera)				# Carriage Return 0Dhex 13dec
    socket_send_byte(10, Camera)				# Line Feed 0Ahex 10dec
  end
  
  
  # Conversion (Radian to Degree)
  def Key_r2d(value):
    local r2d_ratio = 57.29577951
    return r2d_ratio * value
  end
  
  # Move
  def MoveRPY(Pos):
    local RealAccel = Accel * MaxRealAccel / 100.0
    local RealSpeed = Speed * MaxRealSpeed / 100.0
    
    A = RPY_to_AxisAngle(Pos)
    movel(A, RealAccel, RealSpeed)
  end
  
  # Conversion (RPY to AxisAngle)
  def RPY_to_AxisAngle(R):
    Rx = R[3] / 2.0
    Ry = R[4] / 2.0
    Rz = R[5] / 2.0
    
    Cx = cos(Rx)
    Sx = sin(Rx)
    Cy = cos(Ry)
    Sy = sin(Ry)
    Cz = cos(Rz)
    Sz = sin(Rz)
    
    Angle = 2.0 * acos(Cx*Cy*Cz + Sx*Sy*Sz)
    x = Sx*Cy*Cz - Cx*Sy*Sz
    y = Cx*Sy*Cz + Sx*Cy*Sz
    z = -Sx*Sy*Cz + Cx*Cy*Sz
    Norm = sqrt(x*x + y*y + z*z)
    Ratio = Angle / Norm
    Ax = x * Ratio
    Ay = y * Ratio
    Az = z * Ratio
    Ans = p[R[0], R[1], R[2], Ax, Ay, Az]
    
    return Ans
  end
  
  # Conversion (AxisAngle to RPY)
  def AxisAngle_to_RPY(R):
    Rx = R[3]
    Ry = R[4]
    Rz = R[5]
    
    Angle = sqrt(Rx*Rx + Ry*Ry + Rz*Rz)
    x = Rx / Angle
    y = Ry / Angle
    z = Rz / Angle
    S = sin(Angle)
    C = cos(Angle)
    T = 1 - C
    
    r11 = T*z*z + C
    r12 = T*z*y + S*x
    r13 = T*z*x - S*y
    r23 = T*y*x + S*z
    r33 = T*x*x + C
    
    Ax = atan2(r12, r11)
    Ay = atan2(-r13, sqrt(r23*r23 + r33*r33))
    Az = atan2(r23, r33)
    Ans = p[R[0], R[1], R[2], Ax, Ay, Az]
    
    return Ans
  end
  
  # Get position in RPY coordinate
  def get_actual_tcp_pose_RPY():
    R = get_actual_tcp_pose()
    A = AxisAngle_to_RPY(R)
    
    return A
  end
  
  # Add position
  def pose_add_RPY(V1, V2):
    A0 = V1[0] + V2[0]
    A1 = V1[1] + V2[1]
    A2 = V1[2] + V2[2]
    A3 = V1[3] + V2[3]
    A4 = V1[4] + V2[4]
    A5 = V1[5] + V2[5]
    A = p[A0, A1, A2, A3, A4, A5]
    
    return A
  end
  $ 1 "BeforeStart"
  $ 2 "CUR_SetUpCamera('Cam1', '192.168.0.10', 8500)"
  CUR_SetUpCamera("Cam1", "192.168.0.10", 8500)
  $ 3 "If CUR_InitComm('Cam1')==False"
  if (CUR_InitComm("Cam1")==False):
    $ 4 "Popup"
    popup("Communication Lost", title="Error", error=True)
    halt
  end
  $ 5 "Robot Program"
  $ 6 "Loop"
  while True:
    $ 7 "triggerResult≔CUR_ProcCommand('Cam1')"
    global triggerResult = CUR_ProcCommand("Cam1")
    varmsg("triggerResult",triggerResult)
    $ 8 "If triggerResult==1"
    if (triggerResult==1):
    end
  end
  $ 10 "CUR_CloseComm('Cam1')"
  CUR_CloseComm("Cam1")
  $ 11 "Halt"
  halt
end
