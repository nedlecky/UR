#  This program is for setting up the robot vision system using
#  Keyence's vision sensor.
#  Please do not use it for purposes other than its original
#  intended purpose.
#  With regard to robot operation, please use the robot while 
#  following the precautions stated in the "User's Manual".
# 
# Copyright (c) 2015 KEYENCE CORPORATION. All rights reserved.


def CUR_SetUpCamera(CAM, IP_Address, Port):
# Pass parameters to global variables.
  global Camera = CAM
  varmsg("Camera", Camera)

  global IP = IP_Address
  varmsg("IP", IP)

  global TelPort = Port
  varmsg("TelPort", TelPort)
  
  global Version = 3000000
  varmsg("Version", Version)
  
  global DiscID = 120
  varmsg("DiscID", DiscID)
  
  global Speed = 10
  varmsg("Speed", Speed)
  
  global Accel = 100
  varmsg("Accel", Accel)
  
  global MaxRealSpeed = 0.3
  global MaxRealAccel = 0.3

end


def CUR_InitComm(CAM):
# Open the connection.
  global connected = False
  while (not  connected):
    global connected = socket_open(IP, TelPort, Camera)	# Establish connection to camera
    varmsg("connected", connected)						# server via Telnet
  end
  return connected
end


def CUR_ProcCommand(CAM):
# Process a command.
  global Camera = CAM
  varmsg("Camera", Camera)
  global nComID = 0
  varmsg("nComID", nComID)
  global nOprtID = 0
  varmsg("nOprtID", nOprtID)
  global nReqID = 0
  varmsg("nReqID", nReqID)
  local nResRslt = 0
  varmsg("nResRslt", nResRslt)
  global Com = socket_read_ascii_float(13, Camera)
  varmsg("Com", Com)
  local P0 = 0
  local P1 = 0
  local P2 = 0
  local P3 = 0
  local P4 = 0
  local P5 = 0
  local P6 = 0
  local P7 = 0
  local P8 = 0
  
  local argNum = floor(Com[0])
  
  if argNum >= 1:
    nComID = floor(Com[1])
  end
  if argNum >= 2:
    nOprtID = floor(Com[2])
  end
  if argNum >= 3:
    nReqID = floor(Com[3])
  end
  if argNum >= 4:
    P0 = floor(Com[4])
  end
  if argNum >= 5:
    P1 = floor(Com[5])
  end
  if argNum >= 6:
    P2 = floor(Com[6])
  end
  if argNum >= 7:
    P3 = floor(Com[7])
  end
  if argNum >= 8:
    P4 = floor(Com[8])
  end
  if argNum >= 9:
    P5 = floor(Com[9])
  end
  if argNum >= 10:
    P6 = floor(Com[10])
  end
  if argNum >= 11:
    P7 = floor(Com[11])
  end
  if argNum >= 12:
    P8 = floor(Com[12])
  end
  
  if argNum == 0:
# Read failed or timeout
    return 0
  elif nComID != 3:
# Invalid command number
    OutputError(nOprtID, nReqID, nResRslt)
    return 1
  end
  
  if nOprtID == 1:
# Echo reply
    Sum = P2
    nResRslt = ProcEcho(nOprtID, nReqID, Sum, P0, P1)
    
  elif nOprtID == 2:
# Get Parameters
    Sum = P0
    nResRslt = ProcGetParam(nOprtID, nReqID, Sum)
    
  elif nOprtID == 3:
# Set Parameters
    Sum = P5
    nResRslt = ProcSetParam(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4)
    
  elif nOprtID == 4:
# Get current position
    Sum = P0
    nResRslt = ProcGetPos(nOprtID, nReqID, Sum)
    
  elif nOprtID == 5:
# Move relatively
    Sum = P8
    nResRslt = ProcMoveRel(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5, P6, P7)
    
  elif nOprtID == 6:
# Move absolutely
    Sum = P6
    nResRslt = ProcMoveAbs(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5)
    
  elif nOprtID == 7:
# Get version
    Sum = P0
    nResRslt = ProcGetVer(nOprtID, nReqID, Sum)
    
  elif nOprtID == 8:
# Get tool coordinate
    Sum = P1
    nResRslt = ProcGetTool(nOprtID, nReqID, Sum, P0)
    
  elif nOprtID == 9:
# Get current position (high-precision)
    Sum = P0
    nResRslt = ProcGetPosHp(nOprtID, nReqID, Sum)
    
  elif nOprtID == 10:
# Move relatively (high-precision)
    Sum = P8
    nResRslt = ProcMoveRelHp(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5, P6, P7)
    
  elif nOprtID == 11:
# Move absolutely (high-precision)
    Sum = P6
    nResRslt = ProcMoveAbsHp(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5)
    
  elif nOprtID == 12:
# Get current joint position
    Sum = P0
    nResRslt = ProcGetJPos(nOprtID, nReqID, Sum)
    
  elif nOprtID == 13:
# Get user coordinate
    Sum = P0
    nResRslt = ProcGetUser(nOprtID, nReqID, Sum)
    
  elif nOprtID == 14:
# Move relatively (joint)
    Sum = P6
    nResRslt = ProcMoveJRel(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5)
    
  elif nOprtID == 15:
# Move absolutely (joint)
    Sum = P6
    nResRslt = ProcMoveJAbs(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5)
    
  else:
    nResRslt = 1
    
  end
  
  if nResRslt != 0:
    OutputError(nOprtID, nReqID, nResRslt)
  end
  
  return nResRslt
end


def CUR_CloseComm(CAM):
# Close the connection.
  global Camera = CAM
  varmsg("Camera", Camera)
  socket_close(Camera)
end


# Echo reply
def ProcEcho(nOprtID, nReqID, Sum, P0, P1):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local O0 = P0
  local O1 = P1
# Conversion
  local nResSum = O0 + O1
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end


# Get parameters
def ProcGetParam(nOprtID, nReqID, Sum):
# Result
  local nParamSum = nOprtID + nReqID
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local O0 = 0
  local O1 = 0
  local O2 = 0
  local O3 = Speed
  local O4 = Accel
# Conversion
  nResSum = O0 + O1 + O2 + O3 + O4
  nResSum = nResSum + nOprtID + nReqID + nResRslt
  
  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Set parameters
def ProcSetParam(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  if P1 != 0:
    nResRslt = 2
  end
  if P2 != 0:
    nResRslt = 2
  end
  Speed = P3
  Accel = P4
  
  local O0 = 0
  local O1 = 0
  local O2 = 0
  local O3 = Speed
  local O4 = Accel
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Get current position
def ProcGetPos(nOprtID, nReqID, Sum):
# Result
  local nParamSum = nOprtID + nReqID
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local CurrentPos = get_actual_tcp_pose_RPY()
  local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
  local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
  local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
  local O3 = floor(Key_r2d(CurrentPos[3]) * 10.0 + 0.5)
  local O4 = floor(Key_r2d(CurrentPos[4]) * 10.0 + 0.5)
  local O5 = floor(Key_r2d(CurrentPos[5]) * 10.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Move relatively
def ProcMoveRel(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5, P6, P7):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5 + P6 + P7
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local CurrentPos = get_actual_tcp_pose_RPY()
  A0 = P0 / 1000000.0
  A1 = P1 / 1000000.0
  A2 = P2 / 1000000.0
  A3 = d2r(P3) / 10.0
  A4 = d2r(P4) / 10.0
  A5 = d2r(P5) / 10.0
  local Vec = p[A0, A1, A2, A3, A4, A5]
  local Pos = pose_add_RPY(CurrentPos, Vec)
  MoveRPY(Pos)

  CurrentPos = get_actual_tcp_pose_RPY()
  local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
  local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
  local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
  local O3 = floor(Key_r2d(CurrentPos[3]) * 10.0 + 0.5)
  local O4 = floor(Key_r2d(CurrentPos[4]) * 10.0 + 0.5)
  local O5 = floor(Key_r2d(CurrentPos[5]) * 10.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Move absolutely
def ProcMoveAbs(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  A0 = P0 / 1000000.0
  A1 = P1 / 1000000.0
  A2 = P2 / 1000000.0
  A3 = d2r(P3) / 10.0
  A4 = d2r(P4) / 10.0
  A5 = d2r(P5) / 10.0
  local Pos = p[A0, A1, A2, A3, A4, A5]
  MoveRPY(Pos)

  local CurrentPos = get_actual_tcp_pose_RPY()
  local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
  local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
  local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
  local O3 = floor(Key_r2d(CurrentPos[3]) * 10.0 + 0.5)
  local O4 = floor(Key_r2d(CurrentPos[4]) * 10.0 + 0.5)
  local O5 = floor(Key_r2d(CurrentPos[5]) * 10.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end


# Get version
def ProcGetVer(nOprtID, nReqID, Sum):
# Result
  local nParamSum = nOprtID + nReqID
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local O0 = Version
  local O1 = DiscID
# Conversion
  nResSum = O0 + O1
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Get tool coordinate (not supported)
def ProcGetTool(nOprtID, nReqID, Sum, P0):
# Result
  local nParamSum = nOprtID + nReqID
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  nResRslt = 3
  local O0 = 0
  local O1 = 0
  local O2 = 0
  local O3 = 0
  local O4 = 0
  local O5 = 0
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Get user coordinate (not supported)
def ProcGetUser(nOprtID, nReqID, Sum):
# Result
  local nParamSum = nOprtID + nReqID
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  nResRslt = 2
  local O0 = 0
  local O1 = 0
  local O2 = 0
  local O3 = 0
  local O4 = 0
  local O5 = 0
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end


# Get current position (high-precision)
def ProcGetPosHp(nOprtID, nReqID, Sum):
# Result
  local nParamSum = nOprtID + nReqID
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local CurrentPos = get_actual_tcp_pose_RPY()
  local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
  local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
  local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
  local O3 = floor(Key_r2d(CurrentPos[3]) * 1000.0 + 0.5)
  local O4 = floor(Key_r2d(CurrentPos[4]) * 1000.0 + 0.5)
  local O5 = floor(Key_r2d(CurrentPos[5]) * 1000.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Get current joint position
def ProcGetJPos(nOprtID, nReqID, Sum):
# Result
  local nParamSum = nOprtID + nReqID
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local CurrentPos = get_actual_joint_positions()
  local O0 = floor(r2d(CurrentPos[0]) * 1000.0 + 0.5)
  local O1 = floor(r2d(CurrentPos[1]) * 1000.0 + 0.5)
  local O2 = floor(r2d(CurrentPos[2]) * 1000.0 + 0.5)
  local O3 = floor(r2d(CurrentPos[3]) * 1000.0 + 0.5)
  local O4 = floor(r2d(CurrentPos[4]) * 1000.0 + 0.5)
  local O5 = floor(r2d(CurrentPos[5]) * 1000.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Move relatively (high-precision)
def ProcMoveRelHp(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5, P6, P7):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5 + P6 + P7
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local CurrentPos = get_actual_tcp_pose_RPY()
  A0 = P0 / 1000000.0
  A1 = P1 / 1000000.0
  A2 = P2 / 1000000.0
  A3 = d2r(P3) / 1000.0
  A4 = d2r(P4) / 1000.0
  A5 = d2r(P5) / 1000.0
  local Vec = p[A0, A1, A2, A3, A4, A5]
  local Pos = pose_add_RPY(CurrentPos, Vec)
  MoveRPY(Pos)

  CurrentPos = get_actual_tcp_pose_RPY()
  local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
  local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
  local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
  local O3 = floor(Key_r2d(CurrentPos[3]) * 1000.0 + 0.5)
  local O4 = floor(Key_r2d(CurrentPos[4]) * 1000.0 + 0.5)
  local O5 = floor(Key_r2d(CurrentPos[5]) * 1000.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Move relatively (joint)
def ProcMoveJRel(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  local CurrentPos = get_actual_joint_positions()
  A0 = d2r(P0 / 1000.0)
  A1 = d2r(P1 / 1000.0)
  A2 = d2r(P2 / 1000.0)
  A3 = d2r(P3 / 1000.0)
  A4 = d2r(P4 / 1000.0)
  A5 = d2r(P5 / 1000.0)
  local Vec = p[A0, A1, A2, A3, A4, A5]
  local Pos = pose_add_RPY(CurrentPos, Vec)
  MoveJ_(Pos)

  CurrentPos = get_actual_joint_positions()
  local O0 = floor(r2d(CurrentPos[0]) * 1000.0 + 0.5)
  local O1 = floor(r2d(CurrentPos[1]) * 1000.0 + 0.5)
  local O2 = floor(r2d(CurrentPos[2]) * 1000.0 + 0.5)
  local O3 = floor(r2d(CurrentPos[3]) * 1000.0 + 0.5)
  local O4 = floor(r2d(CurrentPos[4]) * 1000.0 + 0.5)
  local O5 = floor(r2d(CurrentPos[5]) * 1000.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Move absolutely (joint)
def ProcMoveJAbs(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  A0 = d2r(P0 / 1000.0)
  A1 = d2r(P1 / 1000.0)
  A2 = d2r(P2 / 1000.0)
  A3 = d2r(P3 / 1000.0)
  A4 = d2r(P4 / 1000.0)
  A5 = d2r(P5 / 1000.0)
  local Pos = p[A0, A1, A2, A3, A4, A5]
  MoveJ_(Pos)

  local CurrentPos = get_actual_joint_positions()
  local O0 = floor(r2d(CurrentPos[0]) * 1000.0 + 0.5)
  local O1 = floor(r2d(CurrentPos[1]) * 1000.0 + 0.5)
  local O2 = floor(r2d(CurrentPos[2]) * 1000.0 + 0.5)
  local O3 = floor(r2d(CurrentPos[3]) * 1000.0 + 0.5)
  local O4 = floor(r2d(CurrentPos[4]) * 1000.0 + 0.5)
  local O5 = floor(r2d(CurrentPos[5]) * 1000.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Move absolutely (high-precision)
def ProcMoveAbsHp(nOprtID, nReqID, Sum, P0, P1, P2, P3, P4, P5):
# Result
  local nParamSum = nOprtID + nReqID + P0 + P1 + P2 + P3 + P4 + P5
  local nResRslt = 0
  if Sum != nParamSum:
    nResRslt = 1
    return nResRslt
  end
# Process
  A0 = P0 / 1000000.0
  A1 = P1 / 1000000.0
  A2 = P2 / 1000000.0
  A3 = d2r(P3) / 1000.0
  A4 = d2r(P4) / 1000.0
  A5 = d2r(P5) / 1000.0
  local Pos = p[A0, A1, A2, A3, A4, A5]
  MoveRPY(Pos)

  local CurrentPos = get_actual_tcp_pose_RPY()
  local O0 = floor(CurrentPos[0] * 1000000.0 + 0.5)
  local O1 = floor(CurrentPos[1] * 1000000.0 + 0.5)
  local O2 = floor(CurrentPos[2] * 1000000.0 + 0.5)
  local O3 = floor(Key_r2d(CurrentPos[3]) * 1000.0 + 0.5)
  local O4 = floor(Key_r2d(CurrentPos[4]) * 1000.0 + 0.5)
  local O5 = floor(Key_r2d(CurrentPos[5]) * 1000.0 + 0.5)
# Conversion
  local nResSum = O0 + O1 + O2 + O3 + O4 + O5
  nResSum = nResSum + nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O0, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O1, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O2, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O3, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O4, Camera)
  socket_send_string(",", Camera)
  socket_send_string(O5, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end



# Output an error message
def OutputError(nOprtID, nReqID, nResRslt):
# Conversion
  nResSum = nOprtID + nReqID + nResRslt

  socket_send_string("CRBT,", Camera)
  socket_send_string(nOprtID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nReqID, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResRslt, Camera)
  socket_send_string(",", Camera)
  socket_send_string(nResSum, Camera)
  socket_send_crlf(Camera)
  
  return nResRslt
end


# Send CRLF
def socket_send_crlf(CAM):
  global Camera = CAM
  
  socket_send_byte(13, Camera)				# Carriage Return 0Dhex 13dec
  socket_send_byte(10, Camera)				# Line Feed 0Ahex 10dec
end


# Conversion (Radian to Degree)
def Key_r2d(value):
  local r2d_ratio = 57.29577951
  return r2d_ratio * value
end

# Move
def MoveRPY(Pos):
  local RealAccel = Accel * MaxRealAccel / 100.0
  local RealSpeed = Speed * MaxRealSpeed / 100.0
  
  A = RPY_to_AxisAngle(Pos)
  movel(A, RealAccel, RealSpeed)
end

# MoveJ
def MoveJ_(Pos):
  local RealAccel = Accel * MaxRealAccel / 100.0
  local RealSpeed = Speed * MaxRealSpeed / 100.0
  
  movej(Pos, RealAccel, RealSpeed)
end

# Conversion (RPY to AxisAngle)
def RPY_to_AxisAngle(R):
  Rx = R[3] / 2.0
  Ry = R[4] / 2.0
  Rz = R[5] / 2.0
  
  Cx = cos(Rx)
  Sx = sin(Rx)
  Cy = cos(Ry)
  Sy = sin(Ry)
  Cz = cos(Rz)
  Sz = sin(Rz)
  
  Angle = 2.0 * acos(Cx*Cy*Cz + Sx*Sy*Sz)
  x = Sx*Cy*Cz - Cx*Sy*Sz
  y = Cx*Sy*Cz + Sx*Cy*Sz
  z = -Sx*Sy*Cz + Cx*Cy*Sz
  Norm = sqrt(x*x + y*y + z*z)
  if norm(Norm) < 1e-4:
    Ax = 0
    Ay = 0
    Az = 0
  else:
  Ratio = Angle / Norm
  Ax = x * Ratio
  Ay = y * Ratio
  Az = z * Ratio
  end
  Ans = p[R[0], R[1], R[2], Ax, Ay, Az]
  
  return Ans
end

# Conversion (AxisAngle to RPY)
def AxisAngle_to_RPY(R):
  Rx = R[3]
  Ry = R[4]
  Rz = R[5]
  
  Angle = sqrt(Rx*Rx + Ry*Ry + Rz*Rz)
  if Angle < 1e-4:
    x = 0
    y = 0
    z = 1
  else:
  x = Rx / Angle
  y = Ry / Angle
  z = Rz / Angle
  end
  S = sin(Angle)
  C = cos(Angle)
  T = 1 - C
  
  r11 = T*x*x + C
  r12 = T*x*y - S*z
  r13 = T*x*z + S*y
  r21 = T*x*y + S*z
  r22 = T*y*y + C
  r23 = T*y*z - S*x
  r31 = T*x*z - S*y
  r32 = T*y*z + S*x
  r33 = T*z*z + C
  
  if r31 > 1:
    r31 = 1
  elif r31 < -1:
    r31 = -1
  end
  
  Ay = asin(-r31)
  if Ay > d2r(89.9):
    sinAxMinusAz = (r12 - r23) / (1 - r31)
    cosAxMinusAz = (r13 + r22) / (1 - r31)
    Ax = atan2(sinAxMinusAz, cosAxMinusAz)
    Az =0
  elif Ay < d2r(-89.9):
    sinAxPlusAz = (-r12 - r23) / (1 + r31)
    cosAxPlusAz = (-r13 + r22) / (1 + r31)
    Ax = atan2(sinAxPlusAz, cosAxPlusAz)
    Az = 0
  else:
    Ax = atan2(r32, r33)
    Az = atan2(r21, r11)
  end
  
  Ans = p[R[0], R[1], R[2], Ax, Ay, Az]
  
  return Ans
end

# Get position in RPY coordinate
def get_actual_tcp_pose_RPY():
  R = get_actual_tcp_pose()
  A = AxisAngle_to_RPY(R)
  
  return A
end

# Add position
def pose_add_RPY(V1, V2):
  A0 = V1[0] + V2[0]
  A1 = V1[1] + V2[1]
  A2 = V1[2] + V2[2]
  A3 = V1[3] + V2[3]
  A4 = V1[4] + V2[4]
  A5 = V1[5] + V2[5]
  A = p[A0, A1, A2, A3, A4, A5]
  
  return A
end
